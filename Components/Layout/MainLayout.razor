  @inherits LayoutComponentBase
 @using System.Threading

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<head>
    <style>
        /* Custom class for bold icon effect */
        .bold-icon svg {
            font-size: 1.5rem;
            font-weight: bold;
            filter: drop-shadow(0px 1px 0px black); /* Increase size slightly to give a bold effect */
        }

        .bold-text {
            font-weight: bold;
            font-family: "Didact Gothic", sans-serif;
            color: black; /* Change text color to black for visibility */
        }

        .solid-background {
            background-color: white;
        }

        .centered-search {
            display: flex;
            justify-content: center; /* Center horizontally */
            align-items: center; /* Center vertically */
            height: 100%; /* Full height */
            width: 100%; /* Full width */
        }



        .custom-autocomplete {
            min-width: 300px; /* Adjust as necessary */
            height: 56px; /* Set a desired height */
        }


        /* ///////////////////////////////////////////////////////////////////////////////////////////////////////// */

        /* Applying the Font to the entire Page */
        body {
            font-family: "Didact Gothic", sans-serif;
        }

        /* Bootstrap Button Customization */
        .btn {
            border-radius: 2em;
            margin-right: 1em;
            padding-right: 1em;
            padding-left: 1em;
        }

        .btn-primary {
            border: none;
            background-color: black;
            border: 3px solid black;
        }

            .btn-primary:hover {
                background-color: dimgray;
            }

        /* Custom style for MudBlazor Components */
        .custom-mudtextfield .mud-input {
            --mud-palette-primary: #000000;
        }

        .custom-mudtextfield {
            --mud-palette-primary: #000000;
        }

        .custom-mudtextfield {
            --mud-default-borderradius: 2em;
        }

        .mud-toolbar-appbar {
            margin-top: 1.5em;
            margin-bottom: 1.5em;
        }

        .MudCartIcon {
            background-color: lightyellow;
        }

        /* ///////////////////////////////////////////////////////////////////////////////////////////////////////// */
    </style>
</head>

<MudLayout Style="background-color: transparent;">
    <MudAppBar Elevation="0" Color="Color.Default" Class="solid-background">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Default" Edge="Edge.Start" OnClick="@ToggleDrawer" Class="bold-icon" />

        @* Store Logo & Title *@
        <span class="navbar-brand text-white fw-bold fs-2 didact-gothic-regular" href="#">
            <img src="https://icones.pro/wp-content/uploads/2021/04/icone-de-nourriture-jaune-symbole-png.png" alt="Logo" width="50" height="50" class="d-inline-block align-text-top">
            <span class="text-warning">Food </span><span class="text-black">Store &nbsp;</span>
        </span>

        <MudSpacer />

        @* Search Bar *@
        <div class="centered-search">
            <MudGrid>
                <MudItem xs="12" sm="10" md="8">
                    <MudAutocomplete T="string" Label="Search Food or Restaurants" @bind-Value="value2" SearchFunc="@Search2"
                                     ResetValueOnEmptyText="@resetValueOnEmptyText" Variant="Variant.Outlined"
                                     CoerceText="@coerceText" CoerceValue="@coerceValue"
                                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                     Class="custom-autocomplete custom-mudtextfield"
                                     />
                </MudItem>
            </MudGrid>
        </div>

        <MudSpacer />

        @* Login and Signup Buttons *@
        <button type="button" class="btn btn-primary fs-5" id="LoginButton">Log&nbsp;in</button>
        <MudSpacer />
        <button type="button" class="btn btn-outline-secondary fs-5" id="SignUpButton">Sign&nbsp;up</button>

        <MudSpacer />

        @* Cart Button *@
        <MudBadge Content="4" Color="Color.Warning" Overlap="true" Class="mx-6 my-4">
            <MudIconButton Class="text-black MudCartIcon" Icon="@Icons.Material.Filled.ShoppingCart" OnClick="@(() => OpenDrawer(Anchor.End))"></MudIconButton>
        </MudBadge>

        @* This Drawer will open after clicking the Cart button. *@
        <MudDrawer @bind-Open="@_openCart" Anchor="@_anchor" Elevation="1" Variant="@DrawerVariant.Temporary" OverlayAutoClose="@_overlayAutoClose">
            <img src="https://thumbs.dreamstime.com/b/shopping-trolley-full-food-shopping-trolley-full-food-flat-vector-illustration-112979674.jpg" />
        </MudDrawer>

        @* Codes for Drawer *@
        @code {
        private bool _openCart;
        private Anchor _anchor;
        private bool _overlayAutoClose = true;

        private void OpenDrawer(Anchor anchor)
        {
            _openCart = true;
            _anchor = anchor;
        }
        }

    </MudAppBar>

    <MudDrawer @bind-Open="@_open" Elevation="1" Style="background-color: white;">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6" FontWeight="FontWeight.Bold">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match="NavLinkMatch.All" Style="font-weight: bold;">Store</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Style="font-weight: bold;">Library</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Style="font-weight: bold;">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent Style="background-color: white;">
        @Body
    </MudMainContent>
</MudLayout>


@code {


    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;
    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> Search1(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private bool _open = false;
    private string searchText = string.Empty;

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    private void SearchFood()
    {
        // Logic to search foods based on searchText
        Console.WriteLine($"Searching for food: {searchText}");
    }
}
